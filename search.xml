<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>异常处理</title>
      <link href="/2020/04/11/java/java%E4%B8%AD%E7%BA%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2020/04/11/java/java%E4%B8%AD%E7%BA%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>异常定义:<br>导致程序的正常流程被中断的事件，叫做异常</p><p>文件不存在的异常<br>比如打开d盘的lol.exe文件(java中通过<code>new FileInputStream(f))</code> 这个文件如果不存在就会抛出文件不存在异常<code>FileNotFoundException</code>如果不处理该异常，就会有编译错误</p><pre><code>File f= new File(&quot;d:/LOL.exe&quot;);    //试图打开文件LOL.exe，会抛出FileNotFoundException，如果不处理该异常，就会有编译错误 new FileInputStream(f);</code></pre><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>异常处理常见手段： try catch finally throws</p><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h1><p>1.将可能抛出<code>FileNotFoundException</code> 文件不存在异常的代码放在<code>try</code>里<br>2.如果文件存在，就会顺序往下执行，并且不执行<code>catch</code>块中的代码<br>3. 如果文件不存在，<code>try</code> 里的代码会立即终止，程序流程会运行到对应的<code>catch</code>块中<br>4. <code>e.printStackTrace();</code> 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常<br>5.<br>        File f= new File(“d:/LOL.exe”);</p><pre><code>try{    System.out.println(&quot;试图打开 d:/LOL.exe&quot;);    new FileInputStream(f);    System.out.println(&quot;成功打开&quot;);}catch(FileNotFoundException e){    System.out.println(&quot;d:/LOL.exe不存在&quot;);    e.printStackTrace();}</code></pre><h1 id="使用异常的父类进行catch"><a href="#使用异常的父类进行catch" class="headerlink" title="使用异常的父类进行catch"></a>使用异常的父类进行catch</h1><p><code>FileNotFoundException</code>是<code>Exception</code>的子类，使用<code>Exception</code>也可以<code>catch</code>住<code>FileNotFoundException</code></p><pre><code>File f= new File(&quot;d:/LOL.exe&quot;);    try{        System.out.println(&quot;试图打开 d:/LOL.exe&quot;);        new FileInputStream(f);        System.out.println(&quot;成功打开&quot;);    }    catch(Exception e){        System.out.println(&quot;d:/LOL.exe不存在&quot;);        e.printStackTrace();    }</code></pre><h1 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h1><p>无论是否出现异常，finally中的代码都会被执行</p><pre><code>File f= new File(&quot;d:/LOL.exe&quot;);   try{       System.out.println(&quot;试图打开 d:/LOL.exe&quot;);       new FileInputStream(f);       System.out.println(&quot;成功打开&quot;);   }   catch(FileNotFoundException e){       System.out.println(&quot;d:/LOL.exe不存在&quot;);       e.printStackTrace();   }   finally{       System.out.println(&quot;无论文件是否存在， 都会执行的代码&quot;);   }</code></pre><h1 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h1><p>把异常抛出去 交给别的方法处理</p><pre><code>private static void method1() {    try {        method2();    } catch (FileNotFoundException e) {        // TODO Auto-generated catch block        e.printStackTrace();    }}private static void method2() throws FileNotFoundException {    File f = new File(&quot;d:/LOL.exe&quot;);    System.out.println(&quot;试图打开 d:/LOL.exe&quot;);    new FileInputStream(f);    System.out.println(&quot;成功打开&quot;);}</code></pre><h1 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h1><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li></ol><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>异常分类： 可查异常，运行时异常和错误3种</p><p>其中，运行时异常和错误又叫非可查异常</p><h1 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h1><p>可查异常即必须进行处理的异常，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException<br>如果不处理，编译器，就不让你通过</p><h1 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h1><p>运行时异常RuntimeException指： 不是必须进行try catch的异常 ，即便不进行try catch，也不会有编译错误</p><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>错误Error，指的是系统级别的异常，通常是内存用光了</p><blockquote><p>面试题常问题：: 运行时异常与非运行时异常的区别：<br>运行时异常是不可查异常，不需要进行显式的捕捉<br>非运行时异常是可查异常，必须进行显式的捕捉，或者抛出</p></blockquote><h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>hrowable是类，Exception和Error都继承了该类<br>所以在捕捉的时候，也可以使用Throwable进行捕捉<br>如图： 异常分Error和Exception<br>Exception里又分运行时异常和可查异常。</p><pre><code>File f = new File(&quot;d:/LOL.exe&quot;);    try {        new FileInputStream(f);        //使用Throwable进行异常捕捉    } catch (Throwable t) {        // TODO Auto-generated catch block        t.printStackTrace();    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql/MySQL多表操作</title>
      <link href="/2020/04/08/mysql/MySQL%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/08/mysql/MySQL%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL单表查询</title>
      <link href="/2020/03/24/mysql/MySQL%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2020/03/24/mysql/MySQL%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="4-1简单查询-前面数据表查看数据有讲到"><a href="#4-1简单查询-前面数据表查看数据有讲到" class="headerlink" title="4.1简单查询(前面数据表查看数据有讲到)"></a>4.1简单查询(前面数据表查看数据有讲到)</h2><h2 id="—4-1-1-select语句"><a href="#—4-1-1-select语句" class="headerlink" title="—4.1.1 select语句"></a>—4.1.1 select语句</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];</p></blockquote><h2 id="—4-1-2查询所有字段"><a href="#—4-1-2查询所有字段" class="headerlink" title="—4.1.2查询所有字段"></a>—4.1.2查询所有字段</h2><blockquote><p><code>select * from</code>[table_name];</p></blockquote><h2 id="—4-1-3查询指定字段"><a href="#—4-1-3查询指定字段" class="headerlink" title="—4.1.3查询指定字段"></a>—4.1.3查询指定字段</h2><blockquote><p><code>select</code> column_name1,column_name2 <code>from</code> [table_name];</p></blockquote><h2 id="4-2按条件查询"><a href="#4-2按条件查询" class="headerlink" title="4.2按条件查询"></a>4.2按条件查询</h2><h2 id="—4-2-1关系运算符的查询"><a href="#—4-2-1关系运算符的查询" class="headerlink" title="—4.2.1关系运算符的查询"></a>—4.2.1关系运算符的查询</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name]<br><code>where</code> 条件表达式;</p></blockquote><p>我们查询表tb_student中，只看name和age，条件表达式为:age=17的数据:</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where age=17;+--------+------+| name   | age  |+--------+------+| 小范   |   17 |+--------+------+1 row in set (0.00 sec)</code></pre><h2 id="—4-2-2带IN关键字的查询"><a href="#—4-2-2带IN关键字的查询" class="headerlink" title="—4.2.2带IN关键字的查询"></a>—4.2.2带IN关键字的查询</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];<br><code>where</code> column_name[not]IN(元素1,元素2,…);</p></blockquote><p>我们查询表tb_student中，只看name和age，条件表达式为:age在17 18 19中的数据:</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where age in(17,18,19);</code></pre><h2 id="—4-2-3带between-and-关键字的查询"><a href="#—4-2-3带between-and-关键字的查询" class="headerlink" title="—4.2.3带between and 关键字的查询"></a>—4.2.3带between and 关键字的查询</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];<br><code>where</code> column_name [not] between 元素一 and 元素二;</p></blockquote><p>我们查询表tb_student中，只看name和age，条件表达式为:age在16到18之间的数据:</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where age between 16 and 18;</code></pre><h2 id="—4-2-4空值查询"><a href="#—4-2-4空值查询" class="headerlink" title="—4.2.4空值查询"></a>—4.2.4空值查询</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];<br><code>where</code> column_name  is [not] null;</p></blockquote><p>我们查询表tb_student中，只看name和age，条件表达式为:age为null的数据:</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where age is null;</code></pre><h2 id="—4-2-5带distinct关键字的查询"><a href="#—4-2-5带distinct关键字的查询" class="headerlink" title="—4.2.5带distinct关键字的查询"></a>—4.2.5带distinct关键字的查询</h2><p>使用 distinct 来去掉查询记录中重复的值</p><blockquote><p><code>select</code> <code>distinct</code> column_name,column_name<br><code>from</code> [table_name];</p></blockquote><h2 id="—4-2-6带like关键字的查询"><a href="#—4-2-6带like关键字的查询" class="headerlink" title="—4.2.6带like关键字的查询"></a>—4.2.6带like关键字的查询</h2><p>用于对字符串进行模糊查询</p><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];<br><code>where</code> column_name   [not] like’匹配字符串’;</p></blockquote><p>a%:以a开头的字符串<br>a%c:以a开头 c结尾的字符串<br>%a%:含有a的字符串<br>查找tb_student表中name字段符以”a”开头，以”c”结束 的学生id</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where name like &quot;a%c&quot;;</code></pre><p>ab_cd:以ab开头cd结尾的字符串<br>____ad:以ad结尾的字符串(前面几个下划线代表几个字符)<br>查找tb_student表中name字段符以”ab”开头，以”cd”结束 的学生id</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where name like &apos;ab_cd&apos;;</code></pre><h2 id="—4-2-7带and关键字的多条件查询"><a href="#—4-2-7带and关键字的多条件查询" class="headerlink" title="—4.2.7带and关键字的多条件查询"></a>—4.2.7带and关键字的多条件查询</h2><blockquote><p><code>select</code> column_name,column_name<br><code>from</code> [table_name];<br><code>where</code> 条件表达式1 and  条件表达式2;</p></blockquote><p>我们查询表tb_student中，条件表达式1为:age&lt;15 and 条件表达式2:id&lt;3;</p><pre><code>mysql&gt; select name ,age    -&gt; from tb_student    -&gt; where age&lt;15 and id&lt;3;</code></pre><h2 id="—4-2-8带or关键字的多条件查询"><a href="#—4-2-8带or关键字的多条件查询" class="headerlink" title="—4.2.8带or关键字的多条件查询"></a>—4.2.8带or关键字的多条件查询</h2><p>跟4.2.7类似，只是把and换成or</p><p>or和and关键字一起使用的情况<br>and的优先级高于or</p><h2 id="4-3-高级查询"><a href="#4-3-高级查询" class="headerlink" title="4.3 高级查询"></a>4.3 高级查询</h2><h2 id="—4-3-1-聚合函数"><a href="#—4-3-1-聚合函数" class="headerlink" title="—4.3.1 聚合函数"></a>—4.3.1 聚合函数</h2><p>1、count()函数<br><code>COUNT()函数用来统计记录的条数</code></p><blockquote><p>语法：select count(*)from 表名;</p></blockquote><p>2、sum()函数<br><code>SUM()是求和函数，用于求出表中某个字段所有值的总和</code></p><blockquote><p>语法：select sum(字段名) from 表名;</p></blockquote><p>3、avg()函数<br><code>AVG()函数用于求出某个字段所有值的平均值</code></p><blockquote><p>语法：select avg(字段名)from 表名;</p></blockquote><p>4、max()函数<br><code>MAX()函数是求最大值的函数，用于求出某个字段的最大值</code></p><blockquote><p>语法：select max(grade)from 表名;</p></blockquote><p>5、min()函数<br><code>MIN()函数是求最小值的函数，用于求出某个字段的最小值</code></p><blockquote><p>语法：select min(grade)from 表名;</p></blockquote><h2 id="—4-3-2对查询结果排序"><a href="#—4-3-2对查询结果排序" class="headerlink" title="—4.3.2对查询结果排序"></a>—4.3.2对查询结果排序</h2><p>可以使用<code>ORDER BY</code>对查询结果进行排序。</p><blockquote><p>SELECT (字段名1,字段名2,……)<br>FROM 表名<br>ORDER BY 字段名1 [ASC(升序) | DESC(降序)]，字段名2 [ASC(升序) | DESC(降序)]……</p></blockquote><h2 id="—4-3-3分组查询"><a href="#—4-3-3分组查询" class="headerlink" title="—4.3.3分组查询"></a>—4.3.3分组查询</h2><p>可以使用<code>GROUP BY</code>按某个字段或者多个字段中的值进行分组，字段中值相同的为一组。</p><blockquote><p>SELECT (字段名1,字段名2,……)<br>FROM 表名<br>GROUP BY 字段名1 ，字段名2 [HAVING 条件表达式]……</p></blockquote><p>1、单独使用GROUP BY分组<br>单独使用group by关键字，查询的是每个分组中的一条记录。</p><p>2、GROUP BY和聚合函数一起使用<br>GROUP BY和聚合函数一起使用，可以统计出某个或者某些字段在一个分组中的最大值、最小值、平均值等等。</p><p>3、GROUP BY和HAVING关键字一起使用<br>HAVING关键字和WHERE关键字的作用相同，都用于设置条件表达式对查询结果进行过滤。<br>HAVING关键字和WHERE关键字的区别在于，HAVING关键字后可以跟聚合函数，而WHERE关键字不能。通常情况下HAVING关键字都和GROUP BY一起使用，用于对分组后的结果进行过滤。</p><h2 id="—4-3-4使用LIMIT限制查询结果的数量"><a href="#—4-3-4使用LIMIT限制查询结果的数量" class="headerlink" title="—4.3.4使用LIMIT限制查询结果的数量"></a>—4.3.4使用LIMIT限制查询结果的数量</h2><p>MySQL中提供了一个关键字LIMIT，可以指定查询结果从哪一条记录开始以及一共查询多少条信息。</p><blockquote><p>SELECT 字段名1,字段名2,……<br>FROM 表名<br>LIMIT [OFFSET，] 记录数(4,4的意思是从第五个开始查询四个数)</p></blockquote><h2 id="—4-3-5函数-列表"><a href="#—4-3-5函数-列表" class="headerlink" title="—4.3.5函数(列表)"></a>—4.3.5函数(列表)</h2><p>嗯 有点多 还是自己上网找吧</p><h2 id="4-4-为表和字段取别名"><a href="#4-4-为表和字段取别名" class="headerlink" title="4.4 为表和字段取别名"></a>4.4 为表和字段取别名</h2><h2 id="—4-4-1为表取别名"><a href="#—4-4-1为表取别名" class="headerlink" title="—4.4.1为表取别名"></a>—4.4.1为表取别名</h2><p>在查询操作时，如果表名很长使用起来就不太方便，这时可以为表取一个别名，用这个别名来代替表的名称。<br>MySQL中为表起别名的格式如下所示：</p><blockquote><p>select *from 表名[as]别名;<br>AS关键字用于指定表名的别名，它可以省略不写。</p></blockquote><h2 id="—4-4-2为字段取别名"><a href="#—4-4-2为字段取别名" class="headerlink" title="—4.4.2为字段取别名"></a>—4.4.2为字段取别名</h2><blockquote><p>select字段名[AS]别名，字段名[AS]别名form 表名;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php基本语法</title>
      <link href="/2020/03/16/php%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/03/16/php%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="标记符与书写规则"><a href="#标记符与书写规则" class="headerlink" title="标记符与书写规则"></a>标记符与书写规则</h2><p>在PHP中，定义标识符有一些简单的规则，具体如下:</p><blockquote><p>标识符可以是任何长度，只能由<code>字母、数字、下划线</code>组成<br>标识符不能以<code>数字</code>开始<br>标识符不能包含<code>空格</code><br>如果标识符由多个单词组成，那么应该使用<code>下划线</code>进行分割（如:user_name）</p><p>在PHP中，标识符是区分大小写的，比如$a和$A是不同的。但是<code>函数名称除外</code>，它不区分大小写。</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量必须使用define()函数来声明，声明方式如下所示:<br>bool define(string $name ,mixed $value[,bool$case_insensitive=false])<br>  在上述声明中，参数$name和$value是必选的，分别用于指定常量的名称和值。参数<br>$case_insensitive是可选的，用于指定常量名称是否对大小写敏感，如果<code>$case_insensitive</code>的值为<code>true</code> 表示在调用该常量<br>时，常量名对大小写不敏感，否则，表示对大小写敏感，默认情况为<code>false</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h2 id="print与echo"><a href="#print与echo" class="headerlink" title="print与echo"></a>print与echo</h2>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java索引</title>
      <link href="/2020/03/14/java/java%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/03/14/java/java%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="java自我总结"><a href="#java自我总结" class="headerlink" title="java自我总结"></a>java自我总结</h2><blockquote><p><a href="https://zxq-hexo.github.io/2020/03/13/MySQL数据库/">MySQL第一期数据库</a><br><a href="https://zxq-hexo.github.io/2020/03/13/MYSQL数据类型/">MySQL第二期数据类型</a><br><a href="https://zxq-hexo.github.io/2020/03/14/MySQL数据表/">MySQL第三期数据表</a><br><a href="https://zxq-hexo.github.io/2020/03/13/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4/">MySQL第三期数据表详细命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL索引</title>
      <link href="/2020/03/14/mysql/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/03/14/mysql/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL教程"><a href="#MySQL教程" class="headerlink" title="MySQL教程"></a>MySQL教程</h2><blockquote><p><a href="https://zxq-hexo.github.io/2020/03/13/MySQL数据库/">MySQL第一期数据库</a><br><a href="https://zxq-hexo.github.io/2020/03/13/MYSQL数据类型/">MySQL第二期数据类型</a><br><a href="https://zxq-hexo.github.io/2020/03/14/MySQL数据表/">MySQL第三期数据表</a><br><a href="https://zxq-hexo.github.io/2020/03/13/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4/">MySQL第三期数据表详细命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL数据表</title>
      <link href="/2020/03/14/mysql/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
      <url>/2020/03/14/mysql/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><blockquote><p><code>create table</code> [table_name]<br>(<br>[clumn_name] [column_type],<br>[clumn2_name] [column2_type]<br>);</p></blockquote><p>我们在数据库db_student 中创建一个表名为tb_studnet，并要求有列名[名字name和年龄age]</p><pre><code>mysql&gt;use db_student;Database changedmysql&gt;create table tb_student    -&gt;(    -&gt;name varchar(20),    -&gt;age  int(2)    -&gt;);Query OK,0 rows affected (0.03 sec)</code></pre><h2 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h2><p>注意:在选择数据库(use database_name;)后才可查看数据表</p><blockquote><p><code>show tables;</code> </p></blockquote><p>接下来让我们查看一下tb_student</p><pre><code>mysql&gt;show tables;+----------------------+| Tables_in_db_student |+----------------------+| tb_student           |+----------------------+1 row in set (0.00 sec)</code></pre><p>可以使用(<code>describe</code>[tables_name];或者<code>show create table</code> [tables_name];)更详细的查看<strong>创建</strong>的数据库</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote><p><code>insert into</code>[table_name] (field1,field2….fieldN)<br><code>values</code><br>(value1,value2….valuesN);</p></blockquote><p>接下来我们以数据<strong>小范，16</strong>为例子进行插入数据</p><pre><code>mysql&gt; insert into tb_student(name,age)    -&gt; values    -&gt; (&apos;小范&apos;,16);Query OK, 1 row affected (0.01 sec)</code></pre><p>如果不指定列名一样可以运行(不指定列名，则默认全选列名)</p><pre><code>mysql&gt; insert into tb_student    -&gt; values        -&gt; (&apos;小范&apos;,16);Query OK, 1 row affected (0.01 sec)</code></pre><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><blockquote><p><code>select * from</code>[table_name];</p></blockquote><p>查看tb_student的数据</p><pre><code>mysql&gt; select* from tb_student;+--------+------+| name   | age  |+--------+------+| 小范   |   16 |+--------+------+1 row in set (0.00 sec)</code></pre><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><blockquote><p><code>update</code> [table_name]<br><code>set</code> [clumn_name]=[数据]  （修改数据）<br><code>where</code> [clumn_name]=[数据] （定义到这行）</p></blockquote><p>修改age为17</p><pre><code>mysql&gt; update tb_student    -&gt; set age=17    -&gt; where name=&apos;小范&apos;;Query OK, 1 row affected (0.01 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; select* from tb_student;+--------+------+| name   | age  |+--------+------+| 小范   |   17 |+--------+------+1 row in set (0.00 sec)</code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><blockquote><p><code>delete form</code> [table_name]<code>where</code> [clumn_name]=[数据];</p></blockquote><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><blockquote><p><code>delete from</code>[table_name];<br>只能删除表中的数据 并且删除的数据是可以找回来的</p><p><code>drop table</code>[table_name];<br>这种删除数据的办法 直接删除表  并不可以恢复</p><p><code>truncate table</code> [table_name];<br>只能删除表中的数据  找不回来(数据全删除)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL数据表详细命令</title>
      <link href="/2020/03/13/mysql/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/13/mysql/MySQL%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AF%A6%E7%BB%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>show tables;<br>show create table 表名<br>describe [tables_name];</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><blockquote><p>复制（只复制表头，不复制记录）<br><code>create table</code> [table_name2] <code>like</code> [table_name1];<br>复制（select * from:选择所有记录）<br><code>create table</code> [table_name2] <code>as&lt;select * from</code> [table_name1]<code>&gt;</code>;</p></blockquote><h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><blockquote><p><code>alter table</code> [table_name]<br><code>add</code>(增加) [column __name] [column_type];</p><p><code>alter table</code> [table_name]<br><code>drop</code>(删除) cloumn [column __name];</p><p><code>alter table</code> [table_name]<br><code>modify</code>(修改) [column __name] [column_type];</p></blockquote><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><blockquote><p><strong>insert</strong>(插入)</p><blockquote><p><code>insert into</code>[table_name] <code>values</code>(数据);<br><code>insert into</code>[table_name] (clumn_name)<code>values</code>(数据);</p></blockquote><p><strong>replace</strong>(替换)</p><blockquote><p><code>replace into</code> [tables_name]<code>values</code>(数据);</p></blockquote><p><strong>update</strong>(修改数据)</p><blockquote><p><code>update</code> [tables_name]<br><code>set</code> [clumn_name]=[clumn_name]+10；<br><code>update</code> [table_name]<br><code>set</code> [  进行修改]<br><code>where</code> [clumn_name];<br>例：update xs<br>set student_id=’123123’,remakes=’计算机专业’<br>where name=’刘华’；</p></blockquote><p><strong>delete</strong>(删除数据)</p><blockquote><p><code>delete form</code> [table_name]<code>where</code> [clumn_name]=[数据];</p></blockquote><p><strong>drop</strong>(删除结构)</p><blockquote><p><code>truncate table</code> [table_name] (数据全删除);</p></blockquote></blockquote><p>作业</p><pre><code>create database db_student;use db_student;create table tb_student();insert into tb_student values(数据);select*from tb_student;</code></pre>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL数据类型</title>
      <link href="/2020/03/13/mysql/MYSQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/03/13/mysql/MYSQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>smallint</td><td>2字节</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3字节</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>int或integer</td><td>4字节</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>bigint</td><td>8字节</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>float</td><td>4 字节</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>double</td><td>8字节</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度浮点数值</td></tr><tr><td>decimal</td><td>自定义</td><td>可变</td><td>可变</td><td>精度确定的小数类型</td></tr></tbody></table><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>data</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>year</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:00/2038</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>char</td><td>0-255字节</td><td>定长字符串</td></tr><tr><td>varchar</td><td>0-65535 字节</td><td>变长字符串</td></tr><tr><td>tinyblob</td><td>0-255字节</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>tinytext</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>text</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>longblob</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>longtext</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>对数据结构有一个了解<br>varchar很常用，可用于经常变化的字段</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL数据库</title>
      <link href="/2020/03/13/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/03/13/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>在打开数据库后 输入密码登录随后输入  </p><blockquote><p><code>create database</code> [database_name];</p></blockquote><p>我们假设数据库名字为db_student 则例子为:  </p><pre><code>musql&gt;create database  db_student;    Query OK,1 row affected (0.01 sec)</code></pre><h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><blockquote><p><code>show databases;</code></p></blockquote><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><blockquote><p><code>use</code>[database_name];</p></blockquote><p>我们假设数据库名字为db_student 则例子为: </p><pre><code>mysql&gt;use db_student;Database changed</code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><blockquote><p><code>drop database</code> [database_name];</p></blockquote><h2 id="退出MySQL"><a href="#退出MySQL" class="headerlink" title="退出MySQL"></a>退出MySQL</h2><blockquote><p><code>exit;</code></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>(以<code>db_student</code>作为要操作的数据库)</p><blockquote><p>创建数据库:<code>create database db_student;</code><br>查询数据库:<code>show databases;</code><br>选择数据库:<code>use db_student；</code><br>删除数据库:<code>drop database db_student;</code><br>退出MySQL：<code>exit;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mySQL</title>
      <link href="/2020/03/11/mysql/MySQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/03/11/mysql/MySQL%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>打开SQLyog<br>点击<br><img src="https://ftp.bmp.ovh/imgs/2020/03/71a9bb81df4c826c.png" alt="1"><br>选择外部数据导入，点击下一步<br><img src="https://ftp.bmp.ovh/imgs/2020/03/93d70bc71c7f765a.png" alt="2"><br>选择导入数据（.excel）<br><img src="https://ftp.bmp.ovh/imgs/2020/03/a76747ab4c490d2a.png" alt="3"><br>选择想要导入数据的数据库<br><img src="https://ftp.bmp.ovh/imgs/2020/03/d39f42db2963340d.png" alt="4"><br>下一步<br><img src="https://ftp.bmp.ovh/imgs/2020/03/388fd8a7187c69ab.png" alt="5"><br>先点击红箭头处，选择你要导入的表，然后点击蓝色箭头，选择表名，随后点击<br><strong>Map</strong><br><img src="https://ftp.bmp.ovh/imgs/2020/03/316ecc1b54c10b55.png" alt="6"><br>在destination 选择对应的标题，type选择类型，再点击 <strong>advan…</strong><br><img src="https://ftp.bmp.ovh/imgs/2020/03/6f4adef7684a9e20.png" alt="6.3"><br>点击删除并重新创建，点击确定<br><img src="https://ftp.bmp.ovh/imgs/2020/03/d882670170825b0c.png" alt="6.5"><br>点击下一步，完成导入。<br><img src="https://ftp.bmp.ovh/imgs/2020/03/8d24947a67c822d9.png" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/03/10/mysql/hello-world/"/>
      <url>/2020/03/10/mysql/hello-world/</url>
      
        <content type="html"><![CDATA[<p>你好</p><p>##1</p><p>###2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96; bash</span><br><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
